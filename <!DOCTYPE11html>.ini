<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Web3 & Blockchain</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.7.4/web3.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/js-sha256/0.9.0/sha256.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* –í–∞—à–∏ —Å—Ç–∏–ª–∏ */
    body {
      background-color: #f8f9fa;
      transition: background-color 0.3s, color 0.3s;
    }
    .dark-theme {
      background-color: #121212;
      color: #ffffff;
    }
    .dark-theme .card {
      background-color: #1e1e1e;
      color: #ffffff;
    }
    .dark-theme .table {
      color: #ffffff;
    }
    .dark-theme .table th {
      background-color: #2c2c2c;
    }
    .dark-theme .table tbody tr:hover {
      background-color: #333333;
    }
    h1 {
      font-size: 2.5rem;
      font-weight: bold;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
      background: linear-gradient(90deg, #007bff, #00bfff);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
    .card {
      margin-bottom: 20px;
      border: none;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .card:hover {
      transform: translateY(-5px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    }
    .card-header {
      background: linear-gradient(90deg, #007bff, #00bfff);
      color: white;
      font-weight: bold;
    }
    .btn-primary {
      background: linear-gradient(90deg, #007bff, #00bfff);
      border: none;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    .table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    .table th, .table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    .table th {
      background-color: #f8f9fa;
      font-weight: bold;
    }
    .table tbody tr:hover {
      background-color: #f1f1f1;
    }
    .alert {
      position: fixed;
      bottom: 20px;
      right: 20px;
      animation: slideIn 0.5s ease-out;
    }
    @keyframes slideIn {
      from {
        transform: translateX(100%);
      }
      to {
        transform: translateX(0);
      }
    }
    @media (max-width: 768px) {
      h1 {
        font-size: 2rem;
      }
      .card {
        margin-bottom: 10px;
      }
      .btn {
        width: 100%;
        margin-bottom: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="text-center my-4"><i class="fas fa-rocket"></i> Web3 & Blockchain</h1>

    <!-- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã -->
    <button id="themeToggle" class="btn btn-secondary mb-4"><i class="fas fa-moon"></i> –¢–µ–º–Ω–∞—è —Ç–µ–º–∞</button>

    <!-- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MetaMask -->
    <div class="card">
      <div class="card-header">üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MetaMask</div>
      <div class="card-body">
        <button id="connectButton" class="btn btn-primary"><i class="fas fa-wallet"></i> –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask</button>
        <div id="walletInfo" class="mt-3"></div>
        <div id="loadingIndicator" class="mt-3" style="display: none;">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
          </div>
        </div>
      </div>
    </div>

    <!-- –ú–æ–Ω–µ—Ç—ã -->
    <div class="card">
      <div class="card-header">üí∞ –ú–æ–Ω–µ—Ç—ã</div>
      <div class="card-body">
        <button class="btn btn-primary" onclick="createCoin()"><i class="fas fa-coins"></i> –°–æ–∑–¥–∞—Ç—å –º–æ–Ω–µ—Ç—É</button>
        <div id="coins" class="mt-3"></div>
      </div>
    </div>

    <!-- –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã -->
    <div class="card">
      <div class="card-header">üì§ –ü–µ—Ä–µ–≤–æ–¥—ã</div>
      <div class="card-body">
        <div class="mb-3">
          <select id="currencySelect" class="form-select">
            <option value="ETH">Ethereum (ETH)</option>
            <option value="BTC">Bitcoin (BTC)</option>
            <option value="USDT">Tether (USDT)</option>
          </select>
        </div>
        <div class="mb-3">
          <input type="text" id="receiverAddress" class="form-control" placeholder="–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è">
          <div id="receiverAddressError" class="error-message"></div>
        </div>
        <div class="mb-3">
          <input type="number" id="transferAmount" class="form-control" placeholder="–°—É–º–º–∞" min="0.01" step="0.01">
          <div id="transferAmountError" class="error-message"></div>
        </div>
        <button class="btn btn-primary" onclick="sendTransaction()"><i class="fas fa-paper-plane"></i> –û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <div id="transactions" class="mt-3"></div>
      </div>
    </div>

    <!-- –ú–∞–π–Ω–∏–Ω–≥ -->
    <div class="card">
      <div class="card-header">‚õè –î–æ–±—ã—á–∞ –±–ª–æ–∫–æ–≤</div>
      <div class="card-body">
        <button class="btn btn-primary" onclick="mineBlock()"><i class="fas fa-hammer"></i> –î–æ–±—ã—Ç—å –±–ª–æ–∫</button>
        <div id="blockchain" class="mt-3"></div>
        <div id="miningAnimation" class="mt-3" style="display: none;">
          <div class="spinner-grow text-primary" role="status">
            <span class="visually-hidden">–ú–∞–π–Ω–∏–Ω–≥...</span>
          </div>
        </div>
      </div>
    </div>

    <!-- –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞ -->
    <div class="card">
      <div class="card-header">üìä –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞</div>
      <div class="card-body">
        <canvas id="balanceChart" width="400" height="200"></canvas>
      </div>
    </div>
  </div>

  <script>
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3
    let web3;
    let userAccount;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractAddress = '0x...'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
    const contractABI = [
      // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ABI
    ];

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MetaMask
    async function connectMetaMask() {
      if (typeof window.ethereum !== 'undefined') {
        try {
          document.getElementById('loadingIndicator').style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
          userAccount = accounts[0];
          document.getElementById('walletInfo').textContent = `–ü–æ–¥–∫–ª—é—á–µ–Ω: ${userAccount.substring(0, 6)}...${userAccount.substring(userAccount.length - 4)}`;
          web3 = new Web3(window.ethereum);
          document.getElementById('loadingIndicator').style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MetaMask:', error);
          document.getElementById('walletInfo').textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MetaMask';
          document.getElementById('loadingIndicator').style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        }
      } else {
        document.getElementById('walletInfo').textContent = 'MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
    async function createCoin() {
      const contract = new web3.eth.Contract(contractABI, contractAddress);
      const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É?');
      if (!confirmed) return;

      try {
        const tx = await contract.methods.createCoin(/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã */).send({ from: userAccount });
        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã:', tx);
        updateCoinsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
        alert('–ú–æ–Ω–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç
    async function updateCoinsList() {
      const contract = new web3.eth.Contract(contractABI, contractAddress);
      try {
        const coins = await contract.methods.getCoins().call();
        document.getElementById('coins').innerHTML = `
          <table class="table">
            <thead>
              <tr>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–°–∏–º–≤–æ–ª</th>
                <th>–ë–∞–ª–∞–Ω—Å</th>
              </tr>
            </thead>
            <tbody>
              ${coins.map(coin => `
                <tr>
                  <td>${coin.name}</td>
                  <td>${coin.symbol}</td>
                  <td>${coin.balance}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        `;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async function sendTransaction() {
      if (!userAccount) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ MetaMask!');
        return;
      }

      const contract = new web3.eth.Contract(contractABI, contractAddress);
      const receiverAddress = document.getElementById('receiverAddress').value;

      if (!web3.utils.isAddress(receiverAddress)) {
        document.getElementById('receiverAddressError').textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è';
        return;
      } else {
        document.getElementById('receiverAddressError').textContent = '';
      }

      const transferAmount = document.getElementById('transferAmount').value;
      if (isNaN(transferAmount) || transferAmount <= 0) {
        document.getElementById('transferAmountError').textContent = '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞';
        return;
      } else {
        document.getElementById('transferAmountError').textContent = '';
      }

      const confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${transferAmount} ${document.getElementById('currencySelect').value} –Ω–∞ –∞–¥—Ä–µ—Å ${receiverAddress}?`);
      if (!confirmed) return;

      try {
        const tx = await contract.methods.transfer(receiverAddress, transferAmount).send({ from: userAccount });
        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', tx);
        updateTransactionsList(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async function updateTransactionsList() {
      const contract = new web3.eth.Contract(contractABI, contractAddress);
      try {
        const transactions = await contract.methods.getTransactions().call();
        document.getElementById('transactions').innerHTML = `
          <table class="table">
            <thead>
              <tr>
                <th>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å</th>
                <th>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</th>
                <th>–°—É–º–º–∞</th>
                <th>–í–∞–ª—é—Ç–∞</th>
              </tr>
            </thead>
            <tbody>
              ${transactions.map(transaction => `
                <tr>
                  <td>${transaction.sender}</td>
                  <td>${transaction.receiver}</td>
                  <td>${transaction.amount}</td>
                  <td>${transaction.currency}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        `;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ –±–ª–æ–∫–∞
    async function mineBlock() {
      if (!userAccount) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ MetaMask!');
        return;
      }

      const contract = new web3.eth.Contract(contractABI, contractAddress);
      const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±—ã—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–∫?');
      if (!confirmed) return;

      try {
        document.getElementById('miningAnimation').style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        const tx = await contract.methods.mineBlock().send({ from: userAccount });
        console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–∞–π–Ω–∏–Ω–≥–∞ –±–ª–æ–∫–∞:', tx);
        updateBlockchainInfo(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ blockchain
        alert('–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±—ã—Ç!');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –±–ª–æ–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞ –±–ª–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      } finally {
        document.getElementById('miningAnimation').style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ blockchain
    async function updateBlockchainInfo() {
      const contract = new web3.eth.Contract(contractABI, contractAddress);
      try {
        const blockchainInfo = await contract.methods.getBlockchainInfo().call();
        document.getElementById('blockchain').innerHTML = `
          <p>–í—ã—Å–æ—Ç–∞ blockchain: ${blockchainInfo.height}</p>
          <p>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${blockchainInfo.lastBlockHash}</p>
        `;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ blockchain:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ blockchain. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    function updateBalanceChart() {
      // –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
      const labels = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π'];
      const data = [100, 200, 150, 300, 250]; // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–ª–∞–Ω—Å–µ

      const balanceChart = new Chart(document.getElementById('balanceChart'), {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: '–ë–∞–ª–∞–Ω—Å',
            data: data,
            borderColor: 'blue',
            borderWidth: 1
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    document.getElementById('themeToggle').addEventListener('click', function() {
      document.body.classList.toggle('dark-theme');
      this.querySelector('i').classList.toggle('fas fa-sun');
      this.querySelector('i').classList.toggle('fas fa-moon');
    });

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MetaMask –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('load', connectMetaMask);
  </script>
</body>
</html>
